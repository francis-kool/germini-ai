import os
import random
import streamlit as st
from dotenv import load_dotenv
from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO

# ─── Load API Key ───────────────────────────────────────────────────────────────
load_dotenv()  # for local dev (.env)
API_KEY = os.getenv("GEMINI_API_KEY")
if not API_KEY:
    st.error("🚨 GEMINI_API_KEY not set! Check .env or Streamlit Secrets.")
    st.stop()

client = genai.Client(api_key=API_KEY)

# ─── Your 52-card dict ────────────────────────────────────────────────────────────
# [Your existing cards dictionary remains unchanged]

# ─── Page config ────────────────────────────────────────────────────────────────
st.set_page_config(page_title="🎴 KoolBox", layout="centered")
st.title("🎴 KoolBox")

# ─── Reset State ─────────────────────────────────────────────────────────────────
def reset():
    for k in ["question_input", "question", "card_key", "answer", "generated_image"]:
        st.session_state.pop(k, None)

# ─── Ask-button callback ─────────────────────────────────────────────────────────
def ask_koolbox():
    q = st.session_state.question_input.strip()
    if not q:
        st.warning("Please type a question first.")
        return

    # store question
    st.session_state.question = q

    # draw a random card
    key = random.choice(list(cards.keys()))
    st.session_state.card_key = key
    card = cards[key]

    # build prompt
    prompt = (
        f"{card['title']}\n"
        f"{card['content']}\n\n"
        "You will describe what the card is about and answer the question "
        "based on this and come up with a positive answer. "
        "Keep it concise and strip all markup styling.\n\n"
        "If user is asking in Chinese, please use Chinese zh-hk to reply."
        f"Question: {q}"
    )

    # call Gemini for text answer
    res = client.models.generate_content(
        model="gemini-1.5-flash",  # Use a model that supports text generation
        config=types.GenerateContentConfig(system_instruction=prompt),
        contents=q
    )
    # store the text answer
    st.session_state.answer = res.text

    # call Gemini for image generation
    try:
        image_res = client.models.generate_content(
            model="gemini-2.0-flash-preview-image-generation",  # Replace with actual image-capable model
            contents=st.session_state.answer,
            config=types.GenerateContentConfig(
                response_modalities=['TEXT', 'IMAGE']
            )
        )
        # store the generated image
        for part in image_res.candidates[0].content.parts:
            if part.inline_data is not None:
                st.session_state.generated_image = part.inline_data.data
                break
        else:
            st.session_state.generated_image = None
            st.warning("No image generated by the model.")
    except Exception as e:
        st.session_state.generated_image = None
        st.error(f"Error generating image: {str(e)}")

# ─── New-session callback ────────────────────────────────────────────────────────
def new_session():
    reset()

# ─── Main UI ────────────────────────────────────────────────────────────────────
# If we already have an answer, show the card, question, answer, and image + New-Session
if "answer" in st.session_state:
    card = cards[st.session_state.card_key]

    st.subheader(card["title"])
    st.write(card["content"])

    st.markdown("---")
    st.markdown(f"**Your question:** {st.session_state.question}")
    
    # Display only the generated image
    if "generated_image" in st.session_state and st.session_state.generated_image:
        try:
            image = Image.open(BytesIO(st.session_state.generated_image))
            st.image(image, caption="Generated Image", use_column_width=True)
        except Exception as e:
            st.error(f"Error displaying image: {str(e)}")
    else:
        st.warning("No image available to display.")

    st.markdown("---")
    st.button("🔄 New Session", on_click=new_session)

else:
    # No answer yet → show the question input & Ask button
    st.text_area(
        "Ask KoolBox…",
        key="question_input",
        height=120,
        placeholder="E.g. How can I improve my focus today?"
    )
    st.button("🗣️ Ask KoolBox", on_click=ask_koolbox)
